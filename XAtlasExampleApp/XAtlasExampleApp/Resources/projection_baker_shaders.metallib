#include <metal_stdlib>
using namespace metal;

struct ProjectionBakerOut {
    float4 position [[position]];
    float2 projUV;
};
constant float4x4 flipYZ = float4x4(
    float4( 1,  0,  0, 0),
    float4( 0, -1,  0, 0),
    float4( 0,  0,  1, 0),
    float4( 0,  0,  0, 1)
);

constexpr sampler colorSampler(filter::linear);
vertex ProjectionBakerOut projectionBakerVertexFunction(
    constant float3  *vertices        [[ buffer(0) ]],
    constant float2  *outputUVs       [[ buffer(1) ]],
    constant float4x4 &viewProjectionMatrix [[ buffer(2) ]],
    uint               vid            [[ vertex_id ]]
) {
    ProjectionBakerOut out;
    float2 uv = outputUVs[vid];
    out.position = float4(uv * 2.0 - 1.0, 0.0, 1.0);
    float4 worldPos = float4(vertices[vid], 1.0);
    float4 clipPos  = viewProjectionMatrix * flipYZ * worldPos;
    out.projUV = clipPos.xy / clipPos.w * 0.5 + 0.5;
    return out;
}

fragment half4 projectionBakerFragmentFunction(
    ProjectionBakerOut in         [[ stage_in ]],
    texture2d<float>  colorTexture [[ texture(0) ]]
) {
    float2 uv = in.projUV;
    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
        discard_fragment();
    }
    return half4(colorTexture.sample(colorSampler, uv));
}
