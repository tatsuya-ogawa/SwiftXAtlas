#include <metal_stdlib>
using namespace metal;

struct ProjectionBakerOut {
    float4 position [[position]];
    float2 projUV;
};

constexpr sampler colorSampler(filter::linear);
vertex ProjectionBakerOut projectionBakerVertexShader(
    constant float3  *vertices        [[ buffer(0) ]],
    constant float2  *outputUVs       [[ buffer(1) ]],
    constant float4x4 &modelMatrix [[ buffer(2) ]],
    constant float4x4 &viewProjectionMatrix [[ buffer(3) ]],
    uint               vid            [[ vertex_id ]]
) {
    ProjectionBakerOut out;
    float2 uv = outputUVs[vid];
    out.position = float4(uv * 2.0 - 1.0, 0.0, 1.0);
    float4 worldPos = modelMatrix * float4(vertices[vid], 1.0);
    float4 clipPos  = viewProjectionMatrix * worldPos;
    out.projUV = clipPos.xy / clipPos.w * 0.5 + 0.5;
    return out;
}

fragment half4 projectionFragmentShader(
    ProjectionBakerOut in         [[ stage_in ]],
    texture2d<float>  colorTexture [[ texture(0) ]]
) {
    return half4(colorTexture.sample(colorSampler, in.projUV));
}
